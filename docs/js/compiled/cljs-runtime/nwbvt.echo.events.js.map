{"version":3,"sources":["nwbvt/echo/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx","re_frame.core.inject_cofx","p__30881","map__30882","cljs.core/--destructure-map","cljs.core.get","high-score","_","cljs.core.assoc","nwbvt.echo.db/default-db","p__30885","p__30886","map__30887","map__30888","nwbvt.echo.events/tick","s","window","scored?","running?","game-id","db","is-echo","is-recent","options","period","clip-multiple","game","and__5043__auto__","cljs.core._EQ_","echo?","nwbvt.echo.game/is-echo?","new-seq","nwbvt.echo.game/advance-sequence","lost?","cljs.core/not","p__30891","p__30893","map__30894","vec__30895","cljs.core.nth","nwbvt.echo.config/env","p__30899","map__30900","nwbvt.echo.events/click","p__30902","map__30903","event","p__30905","p__30906","map__30907","map__30908","nwbvt.echo.events/score","score","points-per-level","new-score","x__5130__auto__","y__5131__auto__","cljs.core/compare","cljs.core/mod","p__30912","map__30913","nwbvt.echo.events/save-score-interceptor","nwbvt.echo.db/save-score","re-frame.core/after","p__30917","map__30918","p__30930","map__30931","nwbvt.echo.events/advance","p__30939","map__30940","p__30945","map__30946","cljs.core/random-uuid","p__30952","p__30953","map__30954","map__30955","vec__30956","flash","to-flash","re_frame.core.reg_event_db","p__30966","p__30967","map__30968","vec__30969"],"sourcesContent":["(ns nwbvt.echo.events\n  (:require\n   [re-frame.core :as rf]\n   [nwbvt.echo.db :as db]\n   [nwbvt.echo.config :as config]\n   [nwbvt.echo.game :as game]))\n\n(rf/reg-event-fx\n ::initialize-db\n [(rf/inject-cofx :high-score)]\n (fn [{:keys [high-score]} _]\n   {:db (assoc db/default-db\n               :high-score high-score)}))\n\n(defn tick\n  \"Perform a tick\"\n  [{:keys [s window scored? running? game-id] :as db}\n   {:keys [is-echo is-recent options period clip-multiple]}\n   game]\n  (if (and running? (= game game-id))\n    (let [echo? (game/is-echo? s window)\n          new-seq (game/advance-sequence s options window\n                                         is-echo is-recent clip-multiple)\n          lost? (and (not scored?) echo?)]\n    {:db (assoc db\n                :s new-seq\n                :clicked? false\n                :scored? false\n                :fade? false)\n     :fx [[:dispatch-later {:ms 500 :dispatch [::fade]}]\n          (if lost?\n            [:dispatch [::game-over]]\n            [:dispatch-later {:ms period :dispatch [::tick game-id]}]\n            )]})))\n\n(rf/reg-event-fx\n  ::tick\n  (fn [{:keys [db]} [_ game-id]]\n    (tick db config/env game-id)))\n\n(defn click\n  [{:keys [s window]}]\n  {:dispatch [(if (game/is-echo? s window)\n                ::score\n                ::game-over)]})\n\n(rf/reg-event-fx\n  ::click\n  (fn [{:keys [db]} event]\n    (click db)))\n\n(defn score\n  [{:keys [high-score score] :as db}\n   {:keys [points-per-level]}]\n  (let [new-score (inc score)]\n      {:db (assoc db\n                  :scored? true\n                  :score (inc score)\n                  :high-score (max high-score score)\n                  :vs-high (compare score high-score))\n       :fx [(if (zero? (mod new-score points-per-level))\n              [:dispatch [::advance]])\n            [:dispatch [::flash :score]]]}))\n\n(defn save-score-interceptor\n  [{score :score}]\n  (db/save-score score))\n\n(rf/reg-event-fx\n  ::score\n  [(rf/after save-score-interceptor)]\n  (fn [{db :db} event]\n    (score db config/env)))\n\n(defn advance\n  [{:keys [window] :as db}]\n  {:db (assoc db :window (inc window))\n   :dispatch [::flash :window]})\n\n(rf/reg-event-fx\n  ::advance\n  (fn [{db :db} event]\n    (advance db)))\n\n(rf/reg-event-fx\n  ::start\n  (fn [{:keys [db]} _]\n    (let [game-id (random-uuid)]\n      {:db (assoc db\n                  :s '()\n                  :running? true\n                  :game-id game-id\n                  :lost? false\n                  :score 0\n                  :vs-high -1\n                  :fade? false\n                  :window 2)\n       :dispatch-later {:ms (:period config/env) :dispatch [::tick game-id]}})))\n\n(rf/reg-event-fx\n  ::flash\n  (fn [{{:keys [flash] :as db} :db} [_ to-flash]]\n    {:db (assoc db :flash\n                (assoc flash to-flash true))\n     :dispatch-later {:ms 1000 :dispatch [::unflash to-flash]}}  ))\n\n(rf/reg-event-db\n  ::unflash\n  (fn [{:keys [flash] :as db} [_ to-flash]]\n    (assoc db :flash\n           (assoc flash to-flash false))))\n\n(rf/reg-event-db\n  ::game-over\n  (fn [db _]\n    (assoc db\n           :running? false\n           :lost? true)))\n\n(rf/reg-event-db\n  ::fade\n  (fn [db _]\n    (assoc db :fade? true)))\n\n\n"]}